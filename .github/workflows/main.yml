name: Main-CI

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
env:
  AWS_ACCESS_KEY: ${{ secrets.AWS_ACCESS_KEY }}
  AWS_SECRET_KEY: ${{ secrets.AWS_SECRET_KEY }}
  AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
  AWS_S3_BUCKET: ${{ secrets.AWS_S3_BUCKET }}
  AWS_S3_BUCKET_URL: ${{ secrets.AWS_S3_BUCKET_URL }}
  RDS_ENDPOINT: ${{ secrets.DB_ENDPOINT }}
  RDS_PORT: ${{ secrets.DB_PORT }}
  RDS_DATABASE_NAME: ${{ secrets.DB_DATABASE_NAME }}
  RDS_USERNAME: ${{ secrets.DB_USERNAME }}
  RDS_PASSWORD: ${{ secrets.DB_PASSWORD }}
  SSL_PASSWORD: ${{ secrets.SSL_PASSWORD }}
  MAIL_FROM_ADDRESS: ${{ secrets.MAIL_FROM_ADDRESS }}
  MAIL_PASSWORD: ${{ secrets.MAIL_PASSWORD }}


jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up JDK 11
        uses: actions/setup-java@v2
        with:
          java-version: '11'
          distribution: 'temurin'
      - name: Grant execute permission to gradlew
        run: chmod +x ./gradlew

      - name: Build with Gradle
        run: ./gradlew clean build

      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Build and push Docker image
        uses: docker/build-push-action@v2
        with:
          context: .
          push: true
          tags: ${{ secrets.DOCKER_IMAGE }}
          file: Dockerfile_spring
          registry: docker.io
          auth: |
            {
              "username": ${{ secrets.DOCKER_USERNAME }},
              "password": ${{ secrets.DOCKER_PASSWORD }}
            }
          build-args: |
            AWS_ACCESS_KEY=${{ secrets.AWS_ACCESS_KEY }}
            AWS_SECRET_KEY=${{ secrets.AWS_SECRET_KEY }}
            AWS_DEFAULT_REGION=${{ secrets.AWS_DEFAULT_REGION }}
            AWS_S3_BUCKET=${{ secrets.AWS_S3_BUCKET }}
            AWS_S3_BUCKET_URL=${{ secrets.AWS_S3_BUCKET_URL }}
            RDS_ENDPOINT=${{ env.RDS_ENDPOINT }}
            RDS_PORT=${{ secrets.DB_PORT }}
            RDS_DATABASE_NAME=${{ secrets.DB_DATABASE_NAME }}
            RDS_USERNAME=${{ secrets.DB_USERNAME }}
            RDS_PASSWORD=${{ secrets.DB_PASSWORD }}
            SSL_PASSWORD=${{ secrets.SSL_PASSWORD }}
            MAIL_FROM_ADDRESS=${{ secrets.MAIL_FROM_ADDRESS }}
            MAIL_PASSWORD=${{ secrets.MAIL_PASSWORD }}
      - name: Install Docker and Docker Compose
        run: |
          #!/bin/bash
          set -e

          sudo apt-get update
          sudo apt-get remove moby-containerd moby-runc
          sudo apt-get install -y containerd runc
          sudo apt-get install -y docker.io

          while true; do
            if sudo apt-get install -y containerd runc docker.io; then
              break
            else
              sudo apt-get update --fix-missing
              sleep 5
            fi
          done

          sudo systemctl start docker
          sudo systemctl enable docker
          sudo curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose

      - name: Set up AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
          aws-region: ${{ secrets.AWS_DEFAULT_REGION }}

      - name: Set environment variables for Docker Compose
        run: |
          echo "AWS_ACCESS_KEY=${{ env.AWS_ACCESS_KEY }}" >> .env
          echo "AWS_SECRET_KEY=${{ env.AWS_SECRET_KEY }}" >> .env
          echo "AWS_DEFAULT_REGION=${{ env.AWS_DEFAULT_REGION }}" >> .env
          echo "AWS_S3_BUCKET=${{ env.AWS_S3_BUCKET }}" >> .env
          echo "AWS_S3_BUCKET_URL=${{ env.AWS_S3_BUCKET_URL }}" >> .env
          echo "RDS_ENDPOINT=${{ env.RDS_ENDPOINT }}" >> .env
          echo "RDS_PORT=${{ env.RDS_PORT }}" >> .env
          echo "RDS_DATABASE_NAME=${{ env.RDS_DATABASE_NAME }}" >> .env
          echo "RDS_USERNAME=${{ env.RDS_USERNAME }}" >> .env
          echo "RDS_PASSWORD=${{ env.RDS_PASSWORD }}" >> .env
          echo "SSL_PASSWORD=${{ env.SSL_PASSWORD }}" >> .env
          echo "MAIL_FROM_ADDRESS=${{ env.MAIL_FROM_ADDRESS }}" >> .env
          echo "MAIL_PASSWORD=${{ env.MAIL_PASSWORD }}" >> .env

      - name: SSH to EC2 instance
        uses: appleboy/ssh-action@master
        with:
          host:  3.39.145.68
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            #  cd /home/ubuntu/myapp
            # sudo docker-compose ps -q | xargs -r docker stop
            # sudo docker-compose pull -v
            # sudo docker-compose up -d
            if ! command -v docker &> /dev/null; then
            sudo yum update -y
            sudo yum install -y docker
            fi
            if ! sudo systemctl is-active --quiet docker; then
            sudo systemctl start docker
            sudo usermod -a -G docker ec2-user
            fi
            if sudo docker ps -a --format '{{.Names}}' | grep -q "^springappProd$"; then
            sudo docker pull  ${{ secrets.DOCKER_IMAGE }}
            sudo docker stop springappProd
            sudo docker rm springappProd
            sudo docker run -d --name springappProd -p 443:443 -e SPRING_PROFILES_ACTIVE=prod ${{ secrets.DOCKER_IMAGE }}
            else
            sudo docker run -d --name springappProd -p 443:443 -e SPRING_PROFILES_ACTIVE=prod ${{ secrets.DOCKER_IMAGE }}
            fi